import cv2
import numpy
import math
from enum import Enum

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__blur_type = BlurType.Box_Blur
        self.__blur_radius = 0.0

        self.blur_output = None

        self.__hsv_threshold_0_input = self.blur_output
        self.__hsv_threshold_0_hue = [59.89208633093526, 69.41979522184302]
        self.__hsv_threshold_0_saturation = [130.71043165467626, 255.0]
        self.__hsv_threshold_0_value = [18.345323741007192, 144.0358361774744]

        self.hsv_threshold_0_output = None

        self.__resize_image_0_input = self.hsv_threshold_0_output
        self.__resize_image_0_width = 640.0
        self.__resize_image_0_height = 480
        self.__resize_image_0_interpolation = cv2.INTER_CUBIC

        self.resize_image_0_output = None

        self.__hsv_threshold_1_input = self.blur_output
        self.__hsv_threshold_1_hue = [0.0, 14.129692832764492]
        self.__hsv_threshold_1_saturation = [208.67805755395685, 255.0]
        self.__hsv_threshold_1_value = [0.0, 93.99317406143346]

        self.hsv_threshold_1_output = None

        self.__resize_image_1_input = self.hsv_threshold_1_output
        self.__resize_image_1_width = 640
        self.__resize_image_1_height = 480
        self.__resize_image_1_interpolation = cv2.INTER_CUBIC

        self.resize_image_1_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Blur0:
        self.__blur_input = source0
        (self.blur_output) = self.__blur(self.__blur_input, self.__blur_type, self.__blur_radius)

        # Step HSV_Threshold0:
        self.__hsv_threshold_0_input = self.blur_output
        (self.hsv_threshold_0_output) = self.__hsv_threshold(self.__hsv_threshold_0_input, self.__hsv_threshold_0_hue, self.__hsv_threshold_0_saturation, self.__hsv_threshold_0_value)

        # Step Resize_Image0:
        self.__resize_image_0_input = self.hsv_threshold_0_output
        (self.resize_image_0_output) = self.__resize_image(self.__resize_image_0_input, self.__resize_image_0_width, self.__resize_image_0_height, self.__resize_image_0_interpolation)

        # Step HSV_Threshold1:
        self.__hsv_threshold_1_input = self.blur_output
        (self.hsv_threshold_1_output) = self.__hsv_threshold(self.__hsv_threshold_1_input, self.__hsv_threshold_1_hue, self.__hsv_threshold_1_saturation, self.__hsv_threshold_1_value)

        # Step Resize_Image1:
        self.__resize_image_1_input = self.hsv_threshold_1_output
        (self.resize_image_1_output) = self.__resize_image(self.__resize_image_1_input, self.__resize_image_1_width, self.__resize_image_1_height, self.__resize_image_1_interpolation)


    @staticmethod
    def __blur(src, type, radius):
        """Softens an image using one of several filters.
        Args:
            src: The source mat (numpy.ndarray).
            type: The blurType to perform represented as an int.
            radius: The radius for the blur as a float.
        Returns:
            A numpy.ndarray that has been blurred.
        """
        if(type is BlurType.Box_Blur):
            ksize = int(2 * round(radius) + 1)
            return cv2.blur(src, (ksize, ksize))
        elif(type is BlurType.Gaussian_Blur):
            ksize = int(6 * round(radius) + 1)
            return cv2.GaussianBlur(src, (ksize, ksize), round(radius))
        elif(type is BlurType.Median_Filter):
            ksize = int(2 * round(radius) + 1)
            return cv2.medianBlur(src, ksize)
        else:
            return cv2.bilateralFilter(src, -1, round(radius), round(radius))

    @staticmethod
    def __hsv_threshold(input, hue, sat, val):
        """Segment an image based on hue, saturation, and value ranges.
        Args:
            input: A BGR numpy.ndarray.
            hue: A list of two numbers the are the min and max hue.
            sat: A list of two numbers the are the min and max saturation.
            lum: A list of two numbers the are the min and max value.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2HSV)
        return cv2.inRange(out, (hue[0], sat[0], val[0]),  (hue[1], sat[1], val[1]))

    @staticmethod
    def __resize_image(input, width, height, interpolation):
        """Scales and image to an exact size.
        Args:
            input: A numpy.ndarray.
            Width: The desired width in pixels.
            Height: The desired height in pixels.
            interpolation: Opencv enum for the type fo interpolation.
        Returns:
            A numpy.ndarray of the new size.
        """
        return cv2.resize(input, ((int)(width), (int)(height)), 0, 0, interpolation)


BlurType = Enum('BlurType', 'Box_Blur Gaussian_Blur Median_Filter Bilateral_Filter')

